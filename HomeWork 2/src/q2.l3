

(define make-ok
  (lambda (val)
    (cons "ok" val)
  )
 )
 
(define make-error
  (lambda (msg)
    (cons "error" msg)
  )
 )

(define ok?
  (lambda (res)
    (if (pair? res) (eq? (car res) "ok") #f)
  )
 )

(define error?
  (lambda (res)
    (if (pair? res) (eq? (car res) "error") #f)
  )
 )

(define result?
  (lambda (res)
    (or (error? res) (ok? res))
  )
 )

(define result->val
  (lambda (res)
    (cdr res)
  )
)

(define bind 
  (lambda (f)
    (lambda (res)
    (if (ok? res) (f (result->val res)) res)
    )
  )
)

(define make-dict
  (lambda ()
    '()
  )
)

(define dict?
  (lambda (e)
    (if (pair? e)
     (if (eq? e '())
      #t
      (if (pair? (car e))
       (dict? (cdr e))
        #f
      )
      ) 
      (if (eq? e '())
      #t
      #f)
    )
  )
)

(define get2
  (lambda (dict k)
     (if (eq? dict '())
        (make-error "Key not found")
        (if (eq? (car (car dict)) k)
            (make-ok (cdr (car dict)))
            (get (cdr dict) k))
            )
  )
)
(define get
  (lambda (dict k)
     (if (dict? dict)
          (get2 dict k)
          (make-error "Error: not a dictionary"))
  )
)

(define putVal
  (lambda (dict k v)
    (if (eq? dict '())
        (cons (cons k v) '())
        (if (eq? (car (car dict)) k)
            (cons (cons (car (car dict)) v) (cdr dict))
            (cons (car dict) (putVal (cdr dict) k v)))
            )
  )
)
(define put
  (lambda (dict k v)
      (if (dict? dict)
          (make-ok (putVal dict k v))
          (make-error "Error: not a dictionary"))
      
  )
)

(define map-dict2
  (lambda (dict f)
    (if(eq? dict '())
            '() 
            (cons (cons (car (car dict)) (f (cdr (car dict)))
                  ) (map-dict2 (cdr dict) f)))
  )
)
(define map-dict
  (lambda (dict f)
    (if (dict? dict)
          (make-ok (map-dict2 dict f))
          (make-error "Error: not a dictionary"))
  )
)

(define filter-dict2
  (lambda (dict pred)
    (if(eq? dict '())
            '() 
            (if (pred (car (car dict)) (cdr (car dict)))
                (cons (cons (car (car dict)) (cdr (car dict)))
                  (filter-dict2 (cdr dict) pred))
              (filter-dict2 (cdr dict) pred)))
  )
)

(define filter-dict
  (lambda (dict pred)
    (if (dict? dict)
          (make-ok (filter-dict2 dict pred))
          (make-error "Error: not a dictionary"))
  )
)
